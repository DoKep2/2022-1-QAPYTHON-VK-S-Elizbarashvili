{"name": "User logout with too long surname", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=98.0.4758.80)", "trace": "self = <ui.tests.main_page_tests.TestMainPage object at 0x7f12ffc1eca0>\nregister_page = <ui.pages.register_page.RegisterPage object at 0x7f12ffaadfa0>\n\n    @allure.epic('UI tests')\n    @allure.title('User logout with too long surname')\n    @pytest.mark.nologin\n    @pytest.mark.xfail\n    def test_logout_bug(self, register_page):\n        data = register_page.fake_invalid_user_data(surname='a' * 255)\n        main_page = register_page.register(data['name'],\n                                           data['surname'],\n                                           data['username'],\n                                           data['email'],\n                                           data['password'],\n                                           data['password'],\n                                           data['middle_name'])\n>       main_page.logout()\n\ndata       = {'confirm_password': 'Andrew Phillips', 'email': 'amy20@lawrence.com', 'middle_name': 'Elizabeth Cox', 'name': 'Robert Hodges', ...}\nmain_page  = <ui.pages.main_page.MainPage object at 0x7f12ffc1e070>\nregister_page = <ui.pages.register_page.RegisterPage object at 0x7f12ffaadfa0>\nself       = <ui.tests.main_page_tests.TestMainPage object at 0x7f12ffc1eca0>\n\ntmp/code/ui/tests/main_page_tests.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntmp/code/ui/pages/main_page.py:14: in logout\n    self.find(MainPageLocators.NavbarLinksLocators.LOGOUT_BUTTON).click()\n        self       = <ui.pages.main_page.MainPage object at 0x7f12ffc1e070>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"dabd7c3e273b859c1efccaacb3859b33\", element=\"7fba636f-3b34-4175-82e7-78b393b04d12\")>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n        command    = 'clickElement'\n        params     = {'id': '7fba636f-3b34-4175-82e7-78b393b04d12', 'sessionId': 'dabd7c3e273b859c1efccaacb3859b33'}\n        self       = <selenium.webdriver.remote.webelement.WebElement (session=\"dabd7c3e273b859c1efccaacb3859b33\", element=\"7fba636f-3b34-4175-82e7-78b393b04d12\")>\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'clickElement'\n        params     = {'id': '7fba636f-3b34-4175-82e7-78b393b04d12'}\n        response   = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5615d0bc4d48 \\\\u003Cunknown>\\\\n#18 0x5615d0bdf2ad \\\\u003Cunknown>\\\\n#19 0x7f542a5c3609 \\\\u003Cunknown>\\\\n\"}}'}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"dabd7c3e273b859c1efccaacb3859b33\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12ffaad3d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5615d0bc4d48 \\\\u003Cunknown>\\\\n#18 0x5615d0bdf2ad \\\\u003Cunknown>\\\\n#19 0x7f542a5c3609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=98.0.4758.80)\n\nexception_class = <class 'selenium.common.exceptions.ElementNotInteractableException'>\njson       = <module 'json' from '/usr/local/lib/python3.8/json/__init__.py'>\nmessage    = 'element not interactable\\n  (Session info: chrome=98.0.4758.80)'\nresponse   = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5615d0bc4d48 \\\\u003Cunknown>\\\\n#18 0x5615d0bdf2ad \\\\u003Cunknown>\\\\n#19 0x7f542a5c3609 \\\\u003Cunknown>\\\\n\"}}'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12ffaad3d0>\nstacktrace = None\nstatus     = 'element not interactable'\nvalue      = {'error': 'element not interactable', 'message': 'element not interactable\\n  (Session info: chrome=98.0.4758.80)', 's... 0x5615d0bc4bc8 <unknown>\\n#17 0x5615d0bc4d48 <unknown>\\n#18 0x5615d0bdf2ad <unknown>\\n#19 0x7f542a5c3609 <unknown>\\n'}\nvalue_json = '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Session info: chrome=98.0.4758....>\\\\n#17 0x5615d0bc4d48 \\\\u003Cunknown>\\\\n#18 0x5615d0bdf2ad \\\\u003Cunknown>\\\\n#19 0x7f542a5c3609 \\\\u003Cunknown>\\\\n\"}}'\n\nusr/local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementNotInteractableException"}, "start": 1653408000251, "stop": 1653408020670, "uuid": "6de0b0fd-b649-4d32-8458-582ce2657920", "historyId": "9c9798a12bcbcb8addf5205e46def51d", "testCaseId": "03699f93914607db59cc8f1332b2be94", "fullName": "main_page_tests.TestMainPage#test_logout_bug", "labels": [{"name": "epic", "value": "UI tests"}, {"name": "tag", "value": "nologin"}, {"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "suite", "value": "main_page_tests"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "66d91c8b37d9"}, {"name": "thread", "value": "17-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main_page_tests"}]}